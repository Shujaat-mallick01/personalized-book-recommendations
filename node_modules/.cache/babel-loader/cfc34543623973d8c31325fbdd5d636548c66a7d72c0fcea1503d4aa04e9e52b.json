{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\T K\\\\Desktop\\\\personalized-book-recommendations\\\\src\\\\contexts\\\\BookContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BookContext = /*#__PURE__*/createContext();\nexport const useBooks = () => {\n  _s();\n  const context = useContext(BookContext);\n  if (!context) {\n    throw new Error('useBooks must be used within BookProvider');\n  }\n  return context;\n};\n_s(useBooks, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const BookProvider = ({\n  children\n}) => {\n  _s2();\n  const [searchResults, setSearchResults] = useState([]);\n  const [recommendations, setRecommendations] = useState([]);\n  const [readingList, setReadingList] = useState([]);\n  const [ratings, setRatings] = useState({});\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Load data from localStorage on mount\n  useEffect(() => {\n    const savedReadingList = localStorage.getItem('bookApp_readingList');\n    const savedRatings = localStorage.getItem('bookApp_ratings');\n    if (savedReadingList) {\n      try {\n        setReadingList(JSON.parse(savedReadingList));\n      } catch (error) {\n        console.error('Error loading reading list:', error);\n      }\n    }\n    if (savedRatings) {\n      try {\n        setRatings(JSON.parse(savedRatings));\n      } catch (error) {\n        console.error('Error loading ratings:', error);\n      }\n    }\n  }, []);\n\n  // Save reading list to localStorage whenever it changes\n  useEffect(() => {\n    localStorage.setItem('bookApp_readingList', JSON.stringify(readingList));\n  }, [readingList]);\n\n  // Save ratings to localStorage whenever they change\n  useEffect(() => {\n    localStorage.setItem('bookApp_ratings', JSON.stringify(ratings));\n  }, [ratings]);\n  const addToReadingList = book => {\n    setReadingList(prev => {\n      const exists = prev.find(b => b.id === book.id);\n      if (!exists) {\n        const newBook = {\n          ...book,\n          dateAdded: new Date().toISOString(),\n          readingStatus: book.readingStatus || 'want-to-read',\n          notes: book.notes || '',\n          currentPage: 0,\n          progressPercent: 0,\n          startedReading: null,\n          finishedReading: null\n        };\n        return [...prev, newBook];\n      }\n      return prev;\n    });\n  };\n  const removeFromReadingList = bookId => {\n    setReadingList(prev => prev.filter(book => book.id !== bookId));\n  };\n  const updateBookInReadingList = (bookId, updates) => {\n    setReadingList(prev => prev.map(book => book.id === bookId ? {\n      ...book,\n      ...updates,\n      lastUpdated: new Date().toISOString()\n    } : book));\n  };\n  const updateBookProgress = (bookId, progressData) => {\n    setReadingList(prev => prev.map(book => {\n      if (book.id === bookId) {\n        const updatedBook = {\n          ...book,\n          ...progressData,\n          lastUpdated: new Date().toISOString()\n        };\n\n        // Auto-update reading status based on progress\n        if (progressData.progressPercent === 100 && book.readingStatus !== 'finished') {\n          updatedBook.readingStatus = 'finished';\n          updatedBook.finishedReading = new Date().toISOString();\n        } else if (progressData.progressPercent > 0 && book.readingStatus === 'want-to-read') {\n          updatedBook.readingStatus = 'currently-reading';\n          updatedBook.startedReading = updatedBook.startedReading || new Date().toISOString();\n        }\n        return updatedBook;\n      }\n      return book;\n    }));\n  };\n  const updateReadingStatus = (bookId, status) => {\n    const statusUpdates = {\n      readingStatus: status,\n      lastUpdated: new Date().toISOString()\n    };\n\n    // Add timestamps based on status\n    if (status === 'currently-reading') {\n      statusUpdates.startedReading = statusUpdates.startedReading || new Date().toISOString();\n    } else if (status === 'finished') {\n      statusUpdates.finishedReading = new Date().toISOString();\n      statusUpdates.progressPercent = 100;\n      statusUpdates.currentPage = statusUpdates.pageCount || statusUpdates.currentPage;\n    }\n    updateBookInReadingList(bookId, statusUpdates);\n  };\n  const rateBook = (bookId, rating) => {\n    setRatings(prev => ({\n      ...prev,\n      [bookId]: rating\n    }));\n  };\n  const addBookNotes = (bookId, notes) => {\n    updateBookInReadingList(bookId, {\n      notes\n    });\n  };\n  const getBookStats = () => {\n    const stats = {\n      totalBooks: readingList.length,\n      wantToRead: readingList.filter(book => book.readingStatus === 'want-to-read').length,\n      currentlyReading: readingList.filter(book => book.readingStatus === 'currently-reading').length,\n      finished: readingList.filter(book => book.readingStatus === 'finished').length,\n      totalRated: Object.keys(ratings).length,\n      averageRating: 0,\n      totalPages: readingList.reduce((total, book) => total + (book.pageCount || 0), 0),\n      pagesRead: readingList.reduce((total, book) => total + (book.currentPage || 0), 0)\n    };\n\n    // Calculate average rating\n    if (stats.totalRated > 0) {\n      const totalRating = Object.values(ratings).reduce((sum, rating) => sum + rating, 0);\n      stats.averageRating = (totalRating / stats.totalRated).toFixed(1);\n    }\n\n    // Calculate reading progress percentage\n    stats.overallProgress = stats.totalPages > 0 ? (stats.pagesRead / stats.totalPages * 100).toFixed(1) : 0;\n    return stats;\n  };\n  const getBooksByStatus = status => {\n    return readingList.filter(book => book.readingStatus === status);\n  };\n  const getHighlyRatedBooks = (minRating = 4) => {\n    return readingList.filter(book => ratings[book.id] >= minRating);\n  };\n  const clearError = () => {\n    setError(null);\n  };\n  const resetReadingList = () => {\n    setReadingList([]);\n    setRatings({});\n    localStorage.removeItem('bookApp_readingList');\n    localStorage.removeItem('bookApp_ratings');\n  };\n  const value = {\n    // State\n    searchResults,\n    setSearchResults,\n    recommendations,\n    setRecommendations,\n    readingList,\n    setReadingList,\n    ratings,\n    setRatings,\n    loading,\n    setLoading,\n    error,\n    setError,\n    // Reading List Actions\n    addToReadingList,\n    removeFromReadingList,\n    updateBookInReadingList,\n    updateBookProgress,\n    updateReadingStatus,\n    addBookNotes,\n    // Rating Actions\n    rateBook,\n    // Utility Functions\n    getBookStats,\n    getBooksByStatus,\n    getHighlyRatedBooks,\n    clearError,\n    resetReadingList\n  };\n  return /*#__PURE__*/_jsxDEV(BookContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 218,\n    columnNumber: 5\n  }, this);\n};\n_s2(BookProvider, \"u47gOZtrv8M8om0P5f7LI0JnqzE=\");\n_c = BookProvider;\nvar _c;\n$RefreshReg$(_c, \"BookProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","BookContext","useBooks","_s","context","Error","BookProvider","children","_s2","searchResults","setSearchResults","recommendations","setRecommendations","readingList","setReadingList","ratings","setRatings","loading","setLoading","error","setError","savedReadingList","localStorage","getItem","savedRatings","JSON","parse","console","setItem","stringify","addToReadingList","book","prev","exists","find","b","id","newBook","dateAdded","Date","toISOString","readingStatus","notes","currentPage","progressPercent","startedReading","finishedReading","removeFromReadingList","bookId","filter","updateBookInReadingList","updates","map","lastUpdated","updateBookProgress","progressData","updatedBook","updateReadingStatus","status","statusUpdates","pageCount","rateBook","rating","addBookNotes","getBookStats","stats","totalBooks","length","wantToRead","currentlyReading","finished","totalRated","Object","keys","averageRating","totalPages","reduce","total","pagesRead","totalRating","values","sum","toFixed","overallProgress","getBooksByStatus","getHighlyRatedBooks","minRating","clearError","resetReadingList","removeItem","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/T K/Desktop/personalized-book-recommendations/src/contexts/BookContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\n\r\nconst BookContext = createContext();\r\n\r\nexport const useBooks = () => {\r\n  const context = useContext(BookContext);\r\n  if (!context) {\r\n    throw new Error('useBooks must be used within BookProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const BookProvider = ({ children }) => {\r\n  const [searchResults, setSearchResults] = useState([]);\r\n  const [recommendations, setRecommendations] = useState([]);\r\n  const [readingList, setReadingList] = useState([]);\r\n  const [ratings, setRatings] = useState({});\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  // Load data from localStorage on mount\r\n  useEffect(() => {\r\n    const savedReadingList = localStorage.getItem('bookApp_readingList');\r\n    const savedRatings = localStorage.getItem('bookApp_ratings');\r\n    \r\n    if (savedReadingList) {\r\n      try {\r\n        setReadingList(JSON.parse(savedReadingList));\r\n      } catch (error) {\r\n        console.error('Error loading reading list:', error);\r\n      }\r\n    }\r\n    \r\n    if (savedRatings) {\r\n      try {\r\n        setRatings(JSON.parse(savedRatings));\r\n      } catch (error) {\r\n        console.error('Error loading ratings:', error);\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  // Save reading list to localStorage whenever it changes\r\n  useEffect(() => {\r\n    localStorage.setItem('bookApp_readingList', JSON.stringify(readingList));\r\n  }, [readingList]);\r\n\r\n  // Save ratings to localStorage whenever they change\r\n  useEffect(() => {\r\n    localStorage.setItem('bookApp_ratings', JSON.stringify(ratings));\r\n  }, [ratings]);\r\n\r\n  const addToReadingList = (book) => {\r\n    setReadingList(prev => {\r\n      const exists = prev.find(b => b.id === book.id);\r\n      if (!exists) {\r\n        const newBook = {\r\n          ...book,\r\n          dateAdded: new Date().toISOString(),\r\n          readingStatus: book.readingStatus || 'want-to-read',\r\n          notes: book.notes || '',\r\n          currentPage: 0,\r\n          progressPercent: 0,\r\n          startedReading: null,\r\n          finishedReading: null\r\n        };\r\n        return [...prev, newBook];\r\n      }\r\n      return prev;\r\n    });\r\n  };\r\n\r\n  const removeFromReadingList = (bookId) => {\r\n    setReadingList(prev => prev.filter(book => book.id !== bookId));\r\n  };\r\n\r\n  const updateBookInReadingList = (bookId, updates) => {\r\n    setReadingList(prev => prev.map(book => \r\n      book.id === bookId \r\n        ? { \r\n            ...book, \r\n            ...updates, \r\n            lastUpdated: new Date().toISOString() \r\n          }\r\n        : book\r\n    ));\r\n  };\r\n\r\n  const updateBookProgress = (bookId, progressData) => {\r\n    setReadingList(prev => prev.map(book => {\r\n      if (book.id === bookId) {\r\n        const updatedBook = { \r\n          ...book, \r\n          ...progressData,\r\n          lastUpdated: new Date().toISOString()\r\n        };\r\n        \r\n        // Auto-update reading status based on progress\r\n        if (progressData.progressPercent === 100 && book.readingStatus !== 'finished') {\r\n          updatedBook.readingStatus = 'finished';\r\n          updatedBook.finishedReading = new Date().toISOString();\r\n        } else if (progressData.progressPercent > 0 && book.readingStatus === 'want-to-read') {\r\n          updatedBook.readingStatus = 'currently-reading';\r\n          updatedBook.startedReading = updatedBook.startedReading || new Date().toISOString();\r\n        }\r\n        \r\n        return updatedBook;\r\n      }\r\n      return book;\r\n    }));\r\n  };\r\n\r\n  const updateReadingStatus = (bookId, status) => {\r\n    const statusUpdates = {\r\n      readingStatus: status,\r\n      lastUpdated: new Date().toISOString()\r\n    };\r\n\r\n    // Add timestamps based on status\r\n    if (status === 'currently-reading') {\r\n      statusUpdates.startedReading = statusUpdates.startedReading || new Date().toISOString();\r\n    } else if (status === 'finished') {\r\n      statusUpdates.finishedReading = new Date().toISOString();\r\n      statusUpdates.progressPercent = 100;\r\n      statusUpdates.currentPage = statusUpdates.pageCount || statusUpdates.currentPage;\r\n    }\r\n\r\n    updateBookInReadingList(bookId, statusUpdates);\r\n  };\r\n\r\n  const rateBook = (bookId, rating) => {\r\n    setRatings(prev => ({ ...prev, [bookId]: rating }));\r\n  };\r\n\r\n  const addBookNotes = (bookId, notes) => {\r\n    updateBookInReadingList(bookId, { notes });\r\n  };\r\n\r\n  const getBookStats = () => {\r\n    const stats = {\r\n      totalBooks: readingList.length,\r\n      wantToRead: readingList.filter(book => book.readingStatus === 'want-to-read').length,\r\n      currentlyReading: readingList.filter(book => book.readingStatus === 'currently-reading').length,\r\n      finished: readingList.filter(book => book.readingStatus === 'finished').length,\r\n      totalRated: Object.keys(ratings).length,\r\n      averageRating: 0,\r\n      totalPages: readingList.reduce((total, book) => total + (book.pageCount || 0), 0),\r\n      pagesRead: readingList.reduce((total, book) => total + (book.currentPage || 0), 0)\r\n    };\r\n\r\n    // Calculate average rating\r\n    if (stats.totalRated > 0) {\r\n      const totalRating = Object.values(ratings).reduce((sum, rating) => sum + rating, 0);\r\n      stats.averageRating = (totalRating / stats.totalRated).toFixed(1);\r\n    }\r\n\r\n    // Calculate reading progress percentage\r\n    stats.overallProgress = stats.totalPages > 0 ? \r\n      ((stats.pagesRead / stats.totalPages) * 100).toFixed(1) : 0;\r\n\r\n    return stats;\r\n  };\r\n\r\n  const getBooksByStatus = (status) => {\r\n    return readingList.filter(book => book.readingStatus === status);\r\n  };\r\n\r\n  const getHighlyRatedBooks = (minRating = 4) => {\r\n    return readingList.filter(book => ratings[book.id] >= minRating);\r\n  };\r\n\r\n  const clearError = () => {\r\n    setError(null);\r\n  };\r\n\r\n  const resetReadingList = () => {\r\n    setReadingList([]);\r\n    setRatings({});\r\n    localStorage.removeItem('bookApp_readingList');\r\n    localStorage.removeItem('bookApp_ratings');\r\n  };\r\n\r\n  const value = {\r\n    // State\r\n    searchResults,\r\n    setSearchResults,\r\n    recommendations,\r\n    setRecommendations,\r\n    readingList,\r\n    setReadingList,\r\n    ratings,\r\n    setRatings,\r\n    loading,\r\n    setLoading,\r\n    error,\r\n    setError,\r\n\r\n    // Reading List Actions\r\n    addToReadingList,\r\n    removeFromReadingList,\r\n    updateBookInReadingList,\r\n    updateBookProgress,\r\n    updateReadingStatus,\r\n    addBookNotes,\r\n\r\n    // Rating Actions\r\n    rateBook,\r\n\r\n    // Utility Functions\r\n    getBookStats,\r\n    getBooksByStatus,\r\n    getHighlyRatedBooks,\r\n    clearError,\r\n    resetReadingList\r\n  };\r\n\r\n  return (\r\n    <BookContext.Provider value={value}>\r\n      {children}\r\n    </BookContext.Provider>\r\n  );\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}