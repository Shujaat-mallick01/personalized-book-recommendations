{"ast":null,"code":"const GOOGLE_BOOKS_API_KEY = process.env.REACT_APP_GOOGLE_BOOKS_API_KEY;\nconst BASE_URL = 'https://www.googleapis.com/books/v1/volumes';\nexport const searchBooks = async (query, maxResults = 10) => {\n  try {\n    // Improve genre search queries\n    const sanitizedQuery = query.replace(/subject:/g, 'subject:').replace(/inauthor:/g, 'inauthor:').trim();\n    const params = new URLSearchParams({\n      q: sanitizedQuery,\n      maxResults: Math.min(maxResults, 40),\n      orderBy: 'relevance',\n      printType: 'books',\n      ...(GOOGLE_BOOKS_API_KEY && {\n        key: GOOGLE_BOOKS_API_KEY\n      })\n    });\n    console.log('Searching with query:', sanitizedQuery); // Debug log\n\n    const response = await fetch(`${BASE_URL}?${params}`);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const data = await response.json();\n    console.log('API Response:', data); // Debug log\n\n    if (!data.items || data.items.length === 0) {\n      console.log('No books found for query:', sanitizedQuery);\n      return [];\n    }\n    return data.items.filter(item => item.volumeInfo).map(item => normalizeBookData(item)).filter(book => book.title && book.authors.length > 0);\n  } catch (error) {\n    console.error('Error searching books:', error);\n    throw new Error('Failed to search books. Please try again later.');\n  }\n};\nexport const getPopularBooks = async (maxResults = 20) => {\n  try {\n    // Use broader search terms that are more likely to return results\n    const popularQueries = ['bestseller', 'fiction bestseller', 'popular books', 'award winning books', 'new releases'];\n    const allBooks = [];\n    for (const query of popularQueries) {\n      try {\n        const books = await searchBooks(query, Math.ceil(maxResults / popularQueries.length));\n        allBooks.push(...books);\n        if (allBooks.length >= maxResults) break;\n      } catch (error) {\n        console.log(`Failed to fetch books for query: ${query}`, error);\n      }\n    }\n\n    // Remove duplicates and return limited results\n    const uniqueBooks = allBooks.filter((book, index, self) => self.findIndex(b => b.id === book.id) === index);\n    return uniqueBooks.slice(0, maxResults);\n  } catch (error) {\n    console.error('Error getting popular books:', error);\n    throw new Error('Failed to load popular books. Please try again later.');\n  }\n};\nexport const searchByGenre = async (genre, maxResults = 20) => {\n  try {\n    // Try multiple search approaches for better results\n    const genreQueries = [`subject:\"${genre}\"`, `subject:${genre}`, `\"${genre}\" fiction`, `\"${genre}\" books`, genre.toLowerCase()];\n    const allBooks = [];\n    for (const query of genreQueries) {\n      try {\n        console.log(`Trying genre search: ${query}`);\n        const books = await searchBooks(query, 8);\n        allBooks.push(...books);\n\n        // If we get enough results, break early\n        if (allBooks.length >= maxResults) break;\n      } catch (error) {\n        console.log(`Genre search failed for: ${query}`, error);\n      }\n    }\n\n    // Remove duplicates\n    const uniqueBooks = allBooks.filter((book, index, self) => self.findIndex(b => b.id === book.id) === index);\n    console.log(`Found ${uniqueBooks.length} books for genre: ${genre}`);\n    return uniqueBooks.slice(0, maxResults);\n  } catch (error) {\n    console.error('Error searching by genre:', error);\n    return []; // Return empty array instead of throwing\n  }\n};\nconst normalizeBookData = apiBook => {\n  var _volumeInfo$industryI, _volumeInfo$industryI2;\n  const volumeInfo = apiBook.volumeInfo || {};\n  return {\n    id: apiBook.id,\n    title: volumeInfo.title || 'Unknown Title',\n    authors: volumeInfo.authors || ['Unknown Author'],\n    description: volumeInfo.description || '',\n    publishedDate: volumeInfo.publishedDate || '',\n    pageCount: volumeInfo.pageCount || 0,\n    categories: volumeInfo.categories || [],\n    averageRating: volumeInfo.averageRating || 0,\n    ratingsCount: volumeInfo.ratingsCount || 0,\n    thumbnail: getBookImage(volumeInfo),\n    previewLink: volumeInfo.previewLink || '',\n    infoLink: volumeInfo.infoLink || '',\n    isbn: ((_volumeInfo$industryI = volumeInfo.industryIdentifiers) === null || _volumeInfo$industryI === void 0 ? void 0 : (_volumeInfo$industryI2 = _volumeInfo$industryI[0]) === null || _volumeInfo$industryI2 === void 0 ? void 0 : _volumeInfo$industryI2.identifier) || ''\n  };\n};\nconst getBookImage = volumeInfo => {\n  var _volumeInfo$imageLink, _volumeInfo$imageLink2;\n  if ((_volumeInfo$imageLink = volumeInfo.imageLinks) !== null && _volumeInfo$imageLink !== void 0 && _volumeInfo$imageLink.thumbnail) return volumeInfo.imageLinks.thumbnail;\n  if ((_volumeInfo$imageLink2 = volumeInfo.imageLinks) !== null && _volumeInfo$imageLink2 !== void 0 && _volumeInfo$imageLink2.smallThumbnail) return volumeInfo.imageLinks.smallThumbnail;\n  return null;\n};","map":{"version":3,"names":["GOOGLE_BOOKS_API_KEY","process","env","REACT_APP_GOOGLE_BOOKS_API_KEY","BASE_URL","searchBooks","query","maxResults","sanitizedQuery","replace","trim","params","URLSearchParams","q","Math","min","orderBy","printType","key","console","log","response","fetch","ok","Error","status","data","json","items","length","filter","item","volumeInfo","map","normalizeBookData","book","title","authors","error","getPopularBooks","popularQueries","allBooks","books","ceil","push","uniqueBooks","index","self","findIndex","b","id","slice","searchByGenre","genre","genreQueries","toLowerCase","apiBook","_volumeInfo$industryI","_volumeInfo$industryI2","description","publishedDate","pageCount","categories","averageRating","ratingsCount","thumbnail","getBookImage","previewLink","infoLink","isbn","industryIdentifiers","identifier","_volumeInfo$imageLink","_volumeInfo$imageLink2","imageLinks","smallThumbnail"],"sources":["C:/Users/T K/Desktop/personalized-book-recommendations/src/services/bookAPI.js"],"sourcesContent":["const GOOGLE_BOOKS_API_KEY = process.env.REACT_APP_GOOGLE_BOOKS_API_KEY;\r\nconst BASE_URL = 'https://www.googleapis.com/books/v1/volumes';\r\n\r\nexport const searchBooks = async (query, maxResults = 10) => {\r\n  try {\r\n    // Improve genre search queries\r\n    const sanitizedQuery = query\r\n      .replace(/subject:/g, 'subject:')\r\n      .replace(/inauthor:/g, 'inauthor:')\r\n      .trim();\r\n\r\n    const params = new URLSearchParams({\r\n      q: sanitizedQuery,\r\n      maxResults: Math.min(maxResults, 40),\r\n      orderBy: 'relevance',\r\n      printType: 'books',\r\n      ...(GOOGLE_BOOKS_API_KEY && { key: GOOGLE_BOOKS_API_KEY })\r\n    });\r\n\r\n    console.log('Searching with query:', sanitizedQuery); // Debug log\r\n\r\n    const response = await fetch(`${BASE_URL}?${params}`);\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(`HTTP error! status: ${response.status}`);\r\n    }\r\n\r\n    const data = await response.json();\r\n    \r\n    console.log('API Response:', data); // Debug log\r\n\r\n    if (!data.items || data.items.length === 0) {\r\n      console.log('No books found for query:', sanitizedQuery);\r\n      return [];\r\n    }\r\n\r\n    return data.items\r\n      .filter(item => item.volumeInfo)\r\n      .map(item => normalizeBookData(item))\r\n      .filter(book => book.title && book.authors.length > 0);\r\n\r\n  } catch (error) {\r\n    console.error('Error searching books:', error);\r\n    throw new Error('Failed to search books. Please try again later.');\r\n  }\r\n};\r\n\r\nexport const getPopularBooks = async (maxResults = 20) => {\r\n  try {\r\n    // Use broader search terms that are more likely to return results\r\n    const popularQueries = [\r\n      'bestseller',\r\n      'fiction bestseller',\r\n      'popular books',\r\n      'award winning books',\r\n      'new releases'\r\n    ];\r\n\r\n    const allBooks = [];\r\n    \r\n    for (const query of popularQueries) {\r\n      try {\r\n        const books = await searchBooks(query, Math.ceil(maxResults / popularQueries.length));\r\n        allBooks.push(...books);\r\n        \r\n        if (allBooks.length >= maxResults) break;\r\n      } catch (error) {\r\n        console.log(`Failed to fetch books for query: ${query}`, error);\r\n      }\r\n    }\r\n\r\n    // Remove duplicates and return limited results\r\n    const uniqueBooks = allBooks.filter((book, index, self) => \r\n      self.findIndex(b => b.id === book.id) === index\r\n    );\r\n\r\n    return uniqueBooks.slice(0, maxResults);\r\n\r\n  } catch (error) {\r\n    console.error('Error getting popular books:', error);\r\n    throw new Error('Failed to load popular books. Please try again later.');\r\n  }\r\n};\r\n\r\nexport const searchByGenre = async (genre, maxResults = 20) => {\r\n  try {\r\n    // Try multiple search approaches for better results\r\n    const genreQueries = [\r\n      `subject:\"${genre}\"`,\r\n      `subject:${genre}`,\r\n      `\"${genre}\" fiction`,\r\n      `\"${genre}\" books`,\r\n      genre.toLowerCase()\r\n    ];\r\n\r\n    const allBooks = [];\r\n    \r\n    for (const query of genreQueries) {\r\n      try {\r\n        console.log(`Trying genre search: ${query}`);\r\n        const books = await searchBooks(query, 8);\r\n        allBooks.push(...books);\r\n        \r\n        // If we get enough results, break early\r\n        if (allBooks.length >= maxResults) break;\r\n      } catch (error) {\r\n        console.log(`Genre search failed for: ${query}`, error);\r\n      }\r\n    }\r\n\r\n    // Remove duplicates\r\n    const uniqueBooks = allBooks.filter((book, index, self) => \r\n      self.findIndex(b => b.id === book.id) === index\r\n    );\r\n\r\n    console.log(`Found ${uniqueBooks.length} books for genre: ${genre}`);\r\n    return uniqueBooks.slice(0, maxResults);\r\n\r\n  } catch (error) {\r\n    console.error('Error searching by genre:', error);\r\n    return []; // Return empty array instead of throwing\r\n  }\r\n};\r\n\r\nconst normalizeBookData = (apiBook) => {\r\n  const volumeInfo = apiBook.volumeInfo || {};\r\n  \r\n  return {\r\n    id: apiBook.id,\r\n    title: volumeInfo.title || 'Unknown Title',\r\n    authors: volumeInfo.authors || ['Unknown Author'],\r\n    description: volumeInfo.description || '',\r\n    publishedDate: volumeInfo.publishedDate || '',\r\n    pageCount: volumeInfo.pageCount || 0,\r\n    categories: volumeInfo.categories || [],\r\n    averageRating: volumeInfo.averageRating || 0,\r\n    ratingsCount: volumeInfo.ratingsCount || 0,\r\n    thumbnail: getBookImage(volumeInfo),\r\n    previewLink: volumeInfo.previewLink || '',\r\n    infoLink: volumeInfo.infoLink || '',\r\n    isbn: volumeInfo.industryIdentifiers?.[0]?.identifier || ''\r\n  };\r\n};\r\n\r\nconst getBookImage = (volumeInfo) => {\r\n  if (volumeInfo.imageLinks?.thumbnail) return volumeInfo.imageLinks.thumbnail;\r\n  if (volumeInfo.imageLinks?.smallThumbnail) return volumeInfo.imageLinks.smallThumbnail;\r\n  return null;\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}