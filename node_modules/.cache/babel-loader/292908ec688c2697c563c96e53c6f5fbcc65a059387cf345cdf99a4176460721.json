{"ast":null,"code":"const GOOGLE_BOOKS_API_KEY = process.env.REACT_APP_GOOGLE_BOOKS_API_KEY;\nconst BASE_URL = 'https://www.googleapis.com/books/v1/volumes';\nconst normalizeBookData = apiBook => {\n  var _volumeInfo$imageLink, _volumeInfo$industryI, _volumeInfo$industryI2;\n  const volumeInfo = apiBook.volumeInfo || {};\n  return {\n    id: apiBook.id,\n    title: volumeInfo.title || 'Unknown Title',\n    authors: volumeInfo.authors || ['Unknown Author'],\n    description: volumeInfo.description || '',\n    publishedDate: volumeInfo.publishedDate || '',\n    pageCount: volumeInfo.pageCount || 0,\n    categories: volumeInfo.categories || [],\n    averageRating: volumeInfo.averageRating || 0,\n    ratingsCount: volumeInfo.ratingsCount || 0,\n    thumbnail: ((_volumeInfo$imageLink = volumeInfo.imageLinks) === null || _volumeInfo$imageLink === void 0 ? void 0 : _volumeInfo$imageLink.thumbnail) || null,\n    previewLink: volumeInfo.previewLink || '',\n    infoLink: volumeInfo.infoLink || '',\n    isbn: ((_volumeInfo$industryI = volumeInfo.industryIdentifiers) === null || _volumeInfo$industryI === void 0 ? void 0 : (_volumeInfo$industryI2 = _volumeInfo$industryI[0]) === null || _volumeInfo$industryI2 === void 0 ? void 0 : _volumeInfo$industryI2.identifier) || ''\n  };\n};\nexport const searchBooks = async (query, maxResults = 10) => {\n  try {\n    const params = new URLSearchParams({\n      q: query,\n      maxResults: Math.min(maxResults, 40),\n      orderBy: 'relevance',\n      printType: 'books',\n      ...(GOOGLE_BOOKS_API_KEY && {\n        key: GOOGLE_BOOKS_API_KEY\n      })\n    });\n    const response = await fetch(`${BASE_URL}?${params}`);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const data = await response.json();\n    if (!data.items || data.items.length === 0) {\n      return [];\n    }\n    return data.items.filter(item => item.volumeInfo).map(item => normalizeBookData(item)).filter(book => book.title && book.authors.length > 0);\n  } catch (error) {\n    console.error('Error searching books:', error);\n    throw new Error('Failed to search books. Please try again later.');\n  }\n};\nexport const getPopularBooks = async (maxResults = 20) => {\n  try {\n    const popularQueries = ['bestseller fiction', 'popular books 2024', 'award winning books', 'new york times bestseller'];\n    const allBooks = [];\n    for (const query of popularQueries) {\n      try {\n        const books = await searchBooks(query, 10);\n        allBooks.push(...books);\n        if (allBooks.length >= maxResults) break;\n      } catch (error) {\n        console.log(`Failed to fetch books for query: ${query}`);\n      }\n    }\n    const uniqueBooks = allBooks.filter((book, index, self) => self.findIndex(b => b.id === book.id) === index);\n    return uniqueBooks.slice(0, maxResults);\n  } catch (error) {\n    console.error('Error getting popular books:', error);\n    throw new Error('Failed to load popular books. Please try again later.');\n  }\n};","map":{"version":3,"names":["GOOGLE_BOOKS_API_KEY","process","env","REACT_APP_GOOGLE_BOOKS_API_KEY","BASE_URL","normalizeBookData","apiBook","_volumeInfo$imageLink","_volumeInfo$industryI","_volumeInfo$industryI2","volumeInfo","id","title","authors","description","publishedDate","pageCount","categories","averageRating","ratingsCount","thumbnail","imageLinks","previewLink","infoLink","isbn","industryIdentifiers","identifier","searchBooks","query","maxResults","params","URLSearchParams","q","Math","min","orderBy","printType","key","response","fetch","ok","Error","status","data","json","items","length","filter","item","map","book","error","console","getPopularBooks","popularQueries","allBooks","books","push","log","uniqueBooks","index","self","findIndex","b","slice"],"sources":["C:/Users/T K/Desktop/personalized-book-recommendations/src/services/bookAPI.js"],"sourcesContent":["const GOOGLE_BOOKS_API_KEY = process.env.REACT_APP_GOOGLE_BOOKS_API_KEY;\r\nconst BASE_URL = 'https://www.googleapis.com/books/v1/volumes';\r\n\r\nconst normalizeBookData = (apiBook) => {\r\n  const volumeInfo = apiBook.volumeInfo || {};\r\n  \r\n  return {\r\n    id: apiBook.id,\r\n    title: volumeInfo.title || 'Unknown Title',\r\n    authors: volumeInfo.authors || ['Unknown Author'],\r\n    description: volumeInfo.description || '',\r\n    publishedDate: volumeInfo.publishedDate || '',\r\n    pageCount: volumeInfo.pageCount || 0,\r\n    categories: volumeInfo.categories || [],\r\n    averageRating: volumeInfo.averageRating || 0,\r\n    ratingsCount: volumeInfo.ratingsCount || 0,\r\n    thumbnail: volumeInfo.imageLinks?.thumbnail || null,\r\n    previewLink: volumeInfo.previewLink || '',\r\n    infoLink: volumeInfo.infoLink || '',\r\n    isbn: volumeInfo.industryIdentifiers?.[0]?.identifier || ''\r\n  };\r\n};\r\n\r\nexport const searchBooks = async (query, maxResults = 10) => {\r\n  try {\r\n    const params = new URLSearchParams({\r\n      q: query,\r\n      maxResults: Math.min(maxResults, 40),\r\n      orderBy: 'relevance',\r\n      printType: 'books',\r\n      ...(GOOGLE_BOOKS_API_KEY && { key: GOOGLE_BOOKS_API_KEY })\r\n    });\r\n\r\n    const response = await fetch(`${BASE_URL}?${params}`);\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(`HTTP error! status: ${response.status}`);\r\n    }\r\n\r\n    const data = await response.json();\r\n    \r\n    if (!data.items || data.items.length === 0) {\r\n      return [];\r\n    }\r\n\r\n    return data.items\r\n      .filter(item => item.volumeInfo)\r\n      .map(item => normalizeBookData(item))\r\n      .filter(book => book.title && book.authors.length > 0);\r\n\r\n  } catch (error) {\r\n    console.error('Error searching books:', error);\r\n    throw new Error('Failed to search books. Please try again later.');\r\n  }\r\n};\r\n\r\nexport const getPopularBooks = async (maxResults = 20) => {\r\n  try {\r\n    const popularQueries = [\r\n      'bestseller fiction',\r\n      'popular books 2024',\r\n      'award winning books',\r\n      'new york times bestseller'\r\n    ];\r\n\r\n    const allBooks = [];\r\n    \r\n    for (const query of popularQueries) {\r\n      try {\r\n        const books = await searchBooks(query, 10);\r\n        allBooks.push(...books);\r\n        if (allBooks.length >= maxResults) break;\r\n      } catch (error) {\r\n        console.log(`Failed to fetch books for query: ${query}`);\r\n      }\r\n    }\r\n\r\n    const uniqueBooks = allBooks.filter((book, index, self) => \r\n      self.findIndex(b => b.id === book.id) === index\r\n    );\r\n\r\n    return uniqueBooks.slice(0, maxResults);\r\n\r\n  } catch (error) {\r\n    console.error('Error getting popular books:', error);\r\n    throw new Error('Failed to load popular books. Please try again later.');\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}