{"ast":null,"code":"// Recommendation algorithms\nexport const generateRecommendations = (userRatings, userPreferences, allBooks, readingList) => {\n  const readingListIds = readingList.map(book => book.id);\n  const availableBooks = allBooks.filter(book => !readingListIds.includes(book.id));\n  if (availableBooks.length === 0) return [];\n\n  // Get user's highly rated books (4+ stars)\n  const highlyRatedBooks = Object.entries(userRatings).filter(([_, rating]) => rating >= 4).map(([bookId]) => bookId);\n  const recommendationScores = availableBooks.map(book => {\n    let score = 0;\n\n    // Score based on genres from highly rated books\n    const userGenres = getUserGenresFromRatings(userRatings, allBooks);\n    if (book.categories) {\n      book.categories.forEach(category => {\n        if (userGenres.includes(category.toLowerCase())) {\n          score += 3;\n        }\n      });\n    }\n\n    // Score based on average rating\n    if (book.averageRating >= 4) score += 2;\n    if (book.averageRating >= 4.5) score += 1;\n\n    // Score based on user preferences\n    if (userPreferences.genres) {\n      userPreferences.genres.forEach(genre => {\n        if (book.categories && book.categories.some(cat => cat.toLowerCase().includes(genre.toLowerCase()))) {\n          score += 2;\n        }\n      });\n    }\n\n    // Score based on similar authors\n    if (userPreferences.authors) {\n      userPreferences.authors.forEach(author => {\n        if (book.authors.some(bookAuthor => bookAuthor.toLowerCase().includes(author.toLowerCase()))) {\n          score += 4;\n        }\n      });\n    }\n\n    // Boost recent books\n    if (book.publishedDate) {\n      const year = parseInt(book.publishedDate.substring(0, 4));\n      if (year >= 2020) score += 1;\n      if (year >= 2022) score += 1;\n    }\n    return {\n      ...book,\n      recommendationScore: score\n    };\n  });\n  return recommendationScores.filter(book => book.recommendationScore > 0).sort((a, b) => b.recommendationScore - a.recommendationScore).slice(0, 20);\n};\nconst getUserGenresFromRatings = (userRatings, allBooks) => {\n  const genres = [];\n  Object.entries(userRatings).forEach(([bookId, rating]) => {\n    if (rating >= 4) {\n      const book = allBooks.find(b => b.id === bookId);\n      if (book && book.categories) {\n        genres.push(...book.categories.map(cat => cat.toLowerCase()));\n      }\n    }\n  });\n  return [...new Set(genres)];\n};\nexport const getRecommendationReason = (book, userRatings, userPreferences, allBooks) => {\n  const reasons = [];\n\n  // Check genre matches\n  const userGenres = getUserGenresFromRatings(userRatings, allBooks);\n  if (book.categories) {\n    const matchingGenres = book.categories.filter(cat => userGenres.includes(cat.toLowerCase()));\n    if (matchingGenres.length > 0) {\n      reasons.push(`You enjoyed ${matchingGenres[0]} books`);\n    }\n  }\n\n  // Check author preferences\n  if (userPreferences.authors) {\n    const matchingAuthor = userPreferences.authors.find(author => book.authors.some(bookAuthor => bookAuthor.toLowerCase().includes(author.toLowerCase())));\n    if (matchingAuthor) {\n      reasons.push(`You like ${matchingAuthor}`);\n    }\n  }\n\n  // Check high rating\n  if (book.averageRating >= 4.5) {\n    reasons.push(`Highly rated (${book.averageRating}⭐)`);\n  }\n  return reasons.length > 0 ? reasons[0] : 'Recommended for you';\n};\nexport const GENRE_OPTIONS = ['Fiction', 'Non-fiction', 'Mystery', 'Romance', 'Science Fiction', 'Fantasy', 'Biography', 'History', 'Self-help', 'Business', 'Psychology', 'Philosophy', 'Science', 'Technology', 'Health', 'Cooking', 'Travel', 'Art', 'Poetry', 'Drama'];\nexport const formatBookForRecommendation = (book, reason) => ({\n  ...book,\n  recommendationReason: reason\n});","map":{"version":3,"names":["generateRecommendations","userRatings","userPreferences","allBooks","readingList","readingListIds","map","book","id","availableBooks","filter","includes","length","highlyRatedBooks","Object","entries","_","rating","bookId","recommendationScores","score","userGenres","getUserGenresFromRatings","categories","forEach","category","toLowerCase","averageRating","genres","genre","some","cat","authors","author","bookAuthor","publishedDate","year","parseInt","substring","recommendationScore","sort","a","b","slice","find","push","Set","getRecommendationReason","reasons","matchingGenres","matchingAuthor","GENRE_OPTIONS","formatBookForRecommendation","reason","recommendationReason"],"sources":["C:/Users/T K/Desktop/personalized-book-recommendations/src/utils/helpers.js"],"sourcesContent":["// Recommendation algorithms\r\nexport const generateRecommendations = (userRatings, userPreferences, allBooks, readingList) => {\r\n  const readingListIds = readingList.map(book => book.id);\r\n  const availableBooks = allBooks.filter(book => !readingListIds.includes(book.id));\r\n  \r\n  if (availableBooks.length === 0) return [];\r\n\r\n  // Get user's highly rated books (4+ stars)\r\n  const highlyRatedBooks = Object.entries(userRatings)\r\n    .filter(([_, rating]) => rating >= 4)\r\n    .map(([bookId]) => bookId);\r\n\r\n  const recommendationScores = availableBooks.map(book => {\r\n    let score = 0;\r\n    \r\n    // Score based on genres from highly rated books\r\n    const userGenres = getUserGenresFromRatings(userRatings, allBooks);\r\n    if (book.categories) {\r\n      book.categories.forEach(category => {\r\n        if (userGenres.includes(category.toLowerCase())) {\r\n          score += 3;\r\n        }\r\n      });\r\n    }\r\n\r\n    // Score based on average rating\r\n    if (book.averageRating >= 4) score += 2;\r\n    if (book.averageRating >= 4.5) score += 1;\r\n\r\n    // Score based on user preferences\r\n    if (userPreferences.genres) {\r\n      userPreferences.genres.forEach(genre => {\r\n        if (book.categories && book.categories.some(cat => \r\n          cat.toLowerCase().includes(genre.toLowerCase())\r\n        )) {\r\n          score += 2;\r\n        }\r\n      });\r\n    }\r\n\r\n    // Score based on similar authors\r\n    if (userPreferences.authors) {\r\n      userPreferences.authors.forEach(author => {\r\n        if (book.authors.some(bookAuthor => \r\n          bookAuthor.toLowerCase().includes(author.toLowerCase())\r\n        )) {\r\n          score += 4;\r\n        }\r\n      });\r\n    }\r\n\r\n    // Boost recent books\r\n    if (book.publishedDate) {\r\n      const year = parseInt(book.publishedDate.substring(0, 4));\r\n      if (year >= 2020) score += 1;\r\n      if (year >= 2022) score += 1;\r\n    }\r\n\r\n    return { ...book, recommendationScore: score };\r\n  });\r\n\r\n  return recommendationScores\r\n    .filter(book => book.recommendationScore > 0)\r\n    .sort((a, b) => b.recommendationScore - a.recommendationScore)\r\n    .slice(0, 20);\r\n};\r\n\r\nconst getUserGenresFromRatings = (userRatings, allBooks) => {\r\n  const genres = [];\r\n  Object.entries(userRatings).forEach(([bookId, rating]) => {\r\n    if (rating >= 4) {\r\n      const book = allBooks.find(b => b.id === bookId);\r\n      if (book && book.categories) {\r\n        genres.push(...book.categories.map(cat => cat.toLowerCase()));\r\n      }\r\n    }\r\n  });\r\n  return [...new Set(genres)];\r\n};\r\n\r\nexport const getRecommendationReason = (book, userRatings, userPreferences, allBooks) => {\r\n  const reasons = [];\r\n  \r\n  // Check genre matches\r\n  const userGenres = getUserGenresFromRatings(userRatings, allBooks);\r\n  if (book.categories) {\r\n    const matchingGenres = book.categories.filter(cat => \r\n      userGenres.includes(cat.toLowerCase())\r\n    );\r\n    if (matchingGenres.length > 0) {\r\n      reasons.push(`You enjoyed ${matchingGenres[0]} books`);\r\n    }\r\n  }\r\n\r\n  // Check author preferences\r\n  if (userPreferences.authors) {\r\n    const matchingAuthor = userPreferences.authors.find(author =>\r\n      book.authors.some(bookAuthor => \r\n        bookAuthor.toLowerCase().includes(author.toLowerCase())\r\n      )\r\n    );\r\n    if (matchingAuthor) {\r\n      reasons.push(`You like ${matchingAuthor}`);\r\n    }\r\n  }\r\n\r\n  // Check high rating\r\n  if (book.averageRating >= 4.5) {\r\n    reasons.push(`Highly rated (${book.averageRating}⭐)`);\r\n  }\r\n\r\n  return reasons.length > 0 ? reasons[0] : 'Recommended for you';\r\n};\r\n\r\nexport const GENRE_OPTIONS = [\r\n  'Fiction', 'Non-fiction', 'Mystery', 'Romance', 'Science Fiction', \r\n  'Fantasy', 'Biography', 'History', 'Self-help', 'Business',\r\n  'Psychology', 'Philosophy', 'Science', 'Technology', 'Health',\r\n  'Cooking', 'Travel', 'Art', 'Poetry', 'Drama'\r\n];\r\n\r\nexport const formatBookForRecommendation = (book, reason) => ({\r\n  ...book,\r\n  recommendationReason: reason\r\n});"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}