{"ast":null,"code":"// Recommendation algorithms\nexport const generateRecommendations = (userRatings, userPreferences, allBooks, readingList) => {\n  const readingListIds = readingList.map(book => book.id);\n  const availableBooks = allBooks.filter(book => !readingListIds.includes(book.id));\n  if (availableBooks.length === 0) return [];\n  const highlyRatedBooks = Object.entries(userRatings).filter(([_, rating]) => rating >= 4).map(([bookId]) => bookId);\n  const recommendationScores = availableBooks.map(book => {\n    let score = 0;\n    const userGenres = getUserGenresFromRatings(userRatings, allBooks);\n    if (book.categories) {\n      book.categories.forEach(category => {\n        if (userGenres.includes(category.toLowerCase())) {\n          score += 3;\n        }\n      });\n    }\n    if (book.averageRating >= 4) score += 2;\n    if (book.averageRating >= 4.5) score += 1;\n    if (userPreferences.genres) {\n      userPreferences.genres.forEach(genre => {\n        if (book.categories && book.categories.some(cat => cat.toLowerCase().includes(genre.toLowerCase()))) {\n          score += 2;\n        }\n      });\n    }\n    if (userPreferences.authors) {\n      userPreferences.authors.forEach(author => {\n        if (book.authors.some(bookAuthor => bookAuthor.toLowerCase().includes(author.toLowerCase()))) {\n          score += 4;\n        }\n      });\n    }\n    if (book.publishedDate) {\n      const year = parseInt(book.publishedDate.substring(0, 4));\n      if (year >= 2020) score += 1;\n      if (year >= 2022) score += 1;\n    }\n    return {\n      ...book,\n      recommendationScore: score\n    };\n  });\n  return recommendationScores.filter(book => book.recommendationScore > 0).sort((a, b) => b.recommendationScore - a.recommendationScore).slice(0, 20);\n};\nconst getUserGenresFromRatings = (userRatings, allBooks) => {\n  const genres = [];\n  Object.entries(userRatings).forEach(([bookId, rating]) => {\n    if (rating >= 4) {\n      const book = allBooks.find(b => b.id === bookId);\n      if (book && book.categories) {\n        genres.push(...book.categories.map(cat => cat.toLowerCase()));\n      }\n    }\n  });\n  return [...new Set(genres)];\n};\nexport const getRecommendationReason = (book, userRatings, userPreferences, allBooks) => {\n  const reasons = [];\n  const userGenres = getUserGenresFromRatings(userRatings, allBooks);\n  if (book.categories) {\n    const matchingGenres = book.categories.filter(cat => userGenres.includes(cat.toLowerCase()));\n    if (matchingGenres.length > 0) {\n      reasons.push(`You enjoyed ${matchingGenres[0]} books`);\n    }\n  }\n  if (userPreferences.authors) {\n    const matchingAuthor = userPreferences.authors.find(author => book.authors.some(bookAuthor => bookAuthor.toLowerCase().includes(author.toLowerCase())));\n    if (matchingAuthor) {\n      reasons.push(`You like ${matchingAuthor}`);\n    }\n  }\n  if (book.averageRating >= 4.5) {\n    reasons.push(`Highly rated (${book.averageRating}/5)`);\n  }\n  return reasons.length > 0 ? reasons[0] : 'Recommended for you';\n};\nexport const formatBookForRecommendation = (book, reason) => ({\n  ...book,\n  recommendationReason: reason\n});\n\n// Genre options for user preferences\nexport const GENRE_OPTIONS = ['Fiction', 'Non-fiction', 'Mystery', 'Romance', 'Science Fiction', 'Fantasy', 'Biography', 'History', 'Self-help', 'Business', 'Psychology', 'Philosophy', 'Science', 'Technology', 'Health', 'Cooking', 'Travel', 'Art', 'Poetry', 'Drama'];\n\n// Reading status configuration\nexport const READING_STATUS_OPTIONS = [{\n  value: 'want-to-read',\n  label: 'Want to Read',\n  color: '#ffc107'\n}, {\n  value: 'currently-reading',\n  label: 'Currently Reading',\n  color: '#28a745'\n}, {\n  value: 'finished',\n  label: 'Finished',\n  color: '#007bff'\n}];\n\n// Utility functions\nexport const formatDate = dateString => {\n  if (!dateString) return 'Unknown';\n  const date = new Date(dateString);\n  return date.toLocaleDateString('en-US', {\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric'\n  });\n};\nexport const truncateText = (text, maxLength = 150) => {\n  if (!text) return 'No description available';\n  const cleanText = text.replace(/<[^>]*>/g, '');\n  return cleanText.length > maxLength ? cleanText.substring(0, maxLength) + '...' : cleanText;\n};\n\n// UPDATED: Book image with custom cover support\nexport const getBookImage = book => {\n  var _book$imageLinks, _book$imageLinks2;\n  // Check for custom uploaded cover first\n  try {\n    const customCovers = JSON.parse(localStorage.getItem('customBookCovers') || '{}');\n    if (customCovers[book.id]) return customCovers[book.id];\n  } catch (error) {\n    console.log('Error loading custom covers:', error);\n  }\n  if (book.thumbnail) return book.thumbnail;\n  if ((_book$imageLinks = book.imageLinks) !== null && _book$imageLinks !== void 0 && _book$imageLinks.thumbnail) return book.imageLinks.thumbnail;\n  if ((_book$imageLinks2 = book.imageLinks) !== null && _book$imageLinks2 !== void 0 && _book$imageLinks2.smallThumbnail) return book.imageLinks.smallThumbnail;\n  return null;\n};\nexport const normalizeBookData = apiBook => {\n  var _volumeInfo$industryI, _volumeInfo$industryI2;\n  const volumeInfo = apiBook.volumeInfo || {};\n  return {\n    id: apiBook.id,\n    title: volumeInfo.title || 'Unknown Title',\n    authors: volumeInfo.authors || ['Unknown Author'],\n    description: volumeInfo.description || '',\n    publishedDate: volumeInfo.publishedDate || '',\n    pageCount: volumeInfo.pageCount || 0,\n    categories: volumeInfo.categories || [],\n    averageRating: volumeInfo.averageRating || 0,\n    ratingsCount: volumeInfo.ratingsCount || 0,\n    thumbnail: getBookImage(volumeInfo),\n    previewLink: volumeInfo.previewLink || '',\n    infoLink: volumeInfo.infoLink || '',\n    isbn: ((_volumeInfo$industryI = volumeInfo.industryIdentifiers) === null || _volumeInfo$industryI === void 0 ? void 0 : (_volumeInfo$industryI2 = _volumeInfo$industryI[0]) === null || _volumeInfo$industryI2 === void 0 ? void 0 : _volumeInfo$industryI2.identifier) || ''\n  };\n};\n\n// Book collection management\nexport const sortBooksByRelevance = (books, query) => {\n  if (!query) return books;\n  const queryLower = query.toLowerCase();\n  return books.sort((a, b) => {\n    var _a$categories, _b$categories;\n    let scoreA = 0;\n    let scoreB = 0;\n    if (a.title.toLowerCase().includes(queryLower)) scoreA += 10;\n    if (b.title.toLowerCase().includes(queryLower)) scoreB += 10;\n    if (a.authors.some(author => author.toLowerCase().includes(queryLower))) scoreA += 5;\n    if (b.authors.some(author => author.toLowerCase().includes(queryLower))) scoreB += 5;\n    if ((_a$categories = a.categories) !== null && _a$categories !== void 0 && _a$categories.some(cat => cat.toLowerCase().includes(queryLower))) scoreA += 2;\n    if ((_b$categories = b.categories) !== null && _b$categories !== void 0 && _b$categories.some(cat => cat.toLowerCase().includes(queryLower))) scoreB += 2;\n    scoreA += (a.averageRating || 0) * 0.1;\n    scoreB += (b.averageRating || 0) * 0.1;\n    return scoreB - scoreA;\n  });\n};\n\n// User preference helpers\nexport const getUserFavoriteGenres = (userRatings, allBooks, minRating = 4) => {\n  const genreCount = {};\n  Object.entries(userRatings).forEach(([bookId, rating]) => {\n    if (rating >= minRating) {\n      const book = allBooks.find(b => b.id === bookId);\n      if (book !== null && book !== void 0 && book.categories) {\n        book.categories.forEach(category => {\n          const normalizedGenre = category.toLowerCase();\n          genreCount[normalizedGenre] = (genreCount[normalizedGenre] || 0) + 1;\n        });\n      }\n    }\n  });\n  return Object.entries(genreCount).sort(([, a], [, b]) => b - a).map(([genre]) => genre).slice(0, 5);\n};\nexport const getUserFavoriteAuthors = (userRatings, allBooks, minRating = 4) => {\n  const authorCount = {};\n  Object.entries(userRatings).forEach(([bookId, rating]) => {\n    if (rating >= minRating) {\n      const book = allBooks.find(b => b.id === bookId);\n      if (book !== null && book !== void 0 && book.authors) {\n        book.authors.forEach(author => {\n          authorCount[author] = (authorCount[author] || 0) + 1;\n        });\n      }\n    }\n  });\n  return Object.entries(authorCount).sort(([, a], [, b]) => b - a).map(([author]) => author).slice(0, 5);\n};\n\n// Reading progress helpers\nexport const calculateReadingProgress = (readingList, readingGoal = 12) => {\n  const finishedBooks = readingList.filter(book => book.readingStatus === 'finished').length;\n  const currentlyReading = readingList.filter(book => book.readingStatus === 'currently-reading').length;\n  const wantToRead = readingList.filter(book => book.readingStatus === 'want-to-read' || !book.readingStatus).length;\n  return {\n    finished: finishedBooks,\n    currentlyReading,\n    wantToRead,\n    totalInList: readingList.length,\n    progressToGoal: Math.min(100, Math.round(finishedBooks / readingGoal * 100)),\n    isOnTrack: finishedBooks >= readingGoal * (new Date().getMonth() + 1) / 12\n  };\n};\n\n// Search and filter helpers\nexport const filterBooksByGenre = (books, genres) => {\n  if (!genres || genres.length === 0) return books;\n  return books.filter(book => {\n    var _book$categories;\n    return (_book$categories = book.categories) === null || _book$categories === void 0 ? void 0 : _book$categories.some(category => genres.some(genre => category.toLowerCase().includes(genre.toLowerCase())));\n  });\n};\nexport const filterBooksByAuthor = (books, authors) => {\n  if (!authors || authors.length === 0) return books;\n  return books.filter(book => {\n    var _book$authors;\n    return (_book$authors = book.authors) === null || _book$authors === void 0 ? void 0 : _book$authors.some(bookAuthor => authors.some(author => bookAuthor.toLowerCase().includes(author.toLowerCase())));\n  });\n};\nexport const filterBooksByRating = (books, minRating = 0) => {\n  return books.filter(book => (book.averageRating || 0) >= minRating);\n};\nexport const filterBooksByYear = (books, startYear, endYear) => {\n  return books.filter(book => {\n    if (!book.publishedDate) return false;\n    const year = parseInt(book.publishedDate.substring(0, 4));\n    return year >= startYear && year <= endYear;\n  });\n};\n\n// CORRECTED: Reading time calculation (shorter format)\nexport const calculateReadingTime = (pageCount, wordsPerPage = 250, wordsPerMinute = 200) => {\n  if (!pageCount || pageCount <= 0) return 'Unknown';\n  const totalWords = pageCount * wordsPerPage;\n  const totalMinutes = totalWords / wordsPerMinute;\n  if (totalMinutes < 60) {\n    return `${Math.round(totalMinutes)} min`;\n  } else {\n    const hours = Math.floor(totalMinutes / 60);\n    const minutes = Math.round(totalMinutes % 60);\n    return minutes > 0 ? `${hours}h ${minutes}m` : `${hours}h`;\n  }\n};\n\n// CORRECTED: Reading difficulty (shorter labels)\nexport const getReadingDifficulty = pageCount => {\n  if (!pageCount || pageCount <= 0) return {\n    level: 'Unknown',\n    color: '#666'\n  };\n  if (pageCount < 200) return {\n    level: 'Quick',\n    color: '#28a745'\n  };\n  if (pageCount < 400) return {\n    level: 'Standard',\n    color: '#ffc107'\n  };\n  if (pageCount < 600) return {\n    level: 'Long',\n    color: '#fd7e14'\n  };\n  return {\n    level: 'Epic',\n    color: '#dc3545'\n  };\n};\n\n// NEW: Random book selection helpers\nexport const getRandomBook = books => {\n  if (!books || books.length === 0) return null;\n  const randomIndex = Math.floor(Math.random() * books.length);\n  return books[randomIndex];\n};\nexport const getRandomUnreadBook = books => {\n  const unreadBooks = books.filter(book => book.readingStatus !== 'finished');\n  return getRandomBook(unreadBooks);\n};\n\n// NEW: Book statistics helpers\nexport const calculateBookStats = (readingList, ratings) => {\n  var _Object$entries$sort$;\n  const totalBooks = readingList.length;\n  const ratedBooks = Object.keys(ratings).length;\n  const finishedBooks = readingList.filter(book => book.readingStatus === 'finished').length;\n  const currentlyReading = readingList.filter(book => book.readingStatus === 'currently-reading').length;\n  const totalPages = readingList.filter(book => book.pageCount > 0).reduce((sum, book) => sum + book.pageCount, 0);\n  const averagePages = totalBooks > 0 ? Math.round(totalPages / totalBooks) : 0;\n  const genreCount = {};\n  readingList.forEach(book => {\n    if (book.categories) {\n      book.categories.forEach(category => {\n        genreCount[category] = (genreCount[category] || 0) + 1;\n      });\n    }\n  });\n  const favoriteGenre = ((_Object$entries$sort$ = Object.entries(genreCount).sort(([, a], [, b]) => b - a)[0]) === null || _Object$entries$sort$ === void 0 ? void 0 : _Object$entries$sort$[0]) || 'None yet';\n  const averageRating = ratedBooks > 0 ? (Object.values(ratings).reduce((sum, rating) => sum + rating, 0) / ratedBooks).toFixed(1) : 0;\n  return {\n    totalBooks,\n    ratedBooks,\n    finishedBooks,\n    currentlyReading,\n    totalPages,\n    averagePages,\n    favoriteGenre,\n    averageRating,\n    genreVariety: Object.keys(genreCount).length\n  };\n};\n\n// NEW: Custom book cover helpers\nexport const saveCustomBookCover = (bookId, imageDataUrl) => {\n  try {\n    const customCovers = JSON.parse(localStorage.getItem('customBookCovers') || '{}');\n    customCovers[bookId] = imageDataUrl;\n    localStorage.setItem('customBookCovers', JSON.stringify(customCovers));\n    return true;\n  } catch (error) {\n    console.error('Error saving custom cover:', error);\n    return false;\n  }\n};\nexport const removeCustomBookCover = bookId => {\n  try {\n    const customCovers = JSON.parse(localStorage.getItem('customBookCovers') || '{}');\n    delete customCovers[bookId];\n    localStorage.setItem('customBookCovers', JSON.stringify(customCovers));\n    return true;\n  } catch (error) {\n    console.error('Error removing custom cover:', error);\n    return false;\n  }\n};","map":{"version":3,"names":["generateRecommendations","userRatings","userPreferences","allBooks","readingList","readingListIds","map","book","id","availableBooks","filter","includes","length","highlyRatedBooks","Object","entries","_","rating","bookId","recommendationScores","score","userGenres","getUserGenresFromRatings","categories","forEach","category","toLowerCase","averageRating","genres","genre","some","cat","authors","author","bookAuthor","publishedDate","year","parseInt","substring","recommendationScore","sort","a","b","slice","find","push","Set","getRecommendationReason","reasons","matchingGenres","matchingAuthor","formatBookForRecommendation","reason","recommendationReason","GENRE_OPTIONS","READING_STATUS_OPTIONS","value","label","color","formatDate","dateString","date","Date","toLocaleDateString","month","day","truncateText","text","maxLength","cleanText","replace","getBookImage","_book$imageLinks","_book$imageLinks2","customCovers","JSON","parse","localStorage","getItem","error","console","log","thumbnail","imageLinks","smallThumbnail","normalizeBookData","apiBook","_volumeInfo$industryI","_volumeInfo$industryI2","volumeInfo","title","description","pageCount","ratingsCount","previewLink","infoLink","isbn","industryIdentifiers","identifier","sortBooksByRelevance","books","query","queryLower","_a$categories","_b$categories","scoreA","scoreB","getUserFavoriteGenres","minRating","genreCount","normalizedGenre","getUserFavoriteAuthors","authorCount","calculateReadingProgress","readingGoal","finishedBooks","readingStatus","currentlyReading","wantToRead","finished","totalInList","progressToGoal","Math","min","round","isOnTrack","getMonth","filterBooksByGenre","_book$categories","filterBooksByAuthor","_book$authors","filterBooksByRating","filterBooksByYear","startYear","endYear","calculateReadingTime","wordsPerPage","wordsPerMinute","totalWords","totalMinutes","hours","floor","minutes","getReadingDifficulty","level","getRandomBook","randomIndex","random","getRandomUnreadBook","unreadBooks","calculateBookStats","ratings","_Object$entries$sort$","totalBooks","ratedBooks","keys","totalPages","reduce","sum","averagePages","favoriteGenre","values","toFixed","genreVariety","saveCustomBookCover","imageDataUrl","setItem","stringify","removeCustomBookCover"],"sources":["C:/Users/T K/Desktop/personalized-book-recommendations/src/utils/helpers.js"],"sourcesContent":["// Recommendation algorithms\r\nexport const generateRecommendations = (userRatings, userPreferences, allBooks, readingList) => {\r\n  const readingListIds = readingList.map(book => book.id);\r\n  const availableBooks = allBooks.filter(book => !readingListIds.includes(book.id));\r\n  \r\n  if (availableBooks.length === 0) return [];\r\n\r\n  const highlyRatedBooks = Object.entries(userRatings)\r\n    .filter(([_, rating]) => rating >= 4)\r\n    .map(([bookId]) => bookId);\r\n\r\n  const recommendationScores = availableBooks.map(book => {\r\n    let score = 0;\r\n    \r\n    const userGenres = getUserGenresFromRatings(userRatings, allBooks);\r\n    if (book.categories) {\r\n      book.categories.forEach(category => {\r\n        if (userGenres.includes(category.toLowerCase())) {\r\n          score += 3;\r\n        }\r\n      });\r\n    }\r\n\r\n    if (book.averageRating >= 4) score += 2;\r\n    if (book.averageRating >= 4.5) score += 1;\r\n\r\n    if (userPreferences.genres) {\r\n      userPreferences.genres.forEach(genre => {\r\n        if (book.categories && book.categories.some(cat => \r\n          cat.toLowerCase().includes(genre.toLowerCase())\r\n        )) {\r\n          score += 2;\r\n        }\r\n      });\r\n    }\r\n\r\n    if (userPreferences.authors) {\r\n      userPreferences.authors.forEach(author => {\r\n        if (book.authors.some(bookAuthor => \r\n          bookAuthor.toLowerCase().includes(author.toLowerCase())\r\n        )) {\r\n          score += 4;\r\n        }\r\n      });\r\n    }\r\n\r\n    if (book.publishedDate) {\r\n      const year = parseInt(book.publishedDate.substring(0, 4));\r\n      if (year >= 2020) score += 1;\r\n      if (year >= 2022) score += 1;\r\n    }\r\n\r\n    return { ...book, recommendationScore: score };\r\n  });\r\n\r\n  return recommendationScores\r\n    .filter(book => book.recommendationScore > 0)\r\n    .sort((a, b) => b.recommendationScore - a.recommendationScore)\r\n    .slice(0, 20);\r\n};\r\n\r\nconst getUserGenresFromRatings = (userRatings, allBooks) => {\r\n  const genres = [];\r\n  Object.entries(userRatings).forEach(([bookId, rating]) => {\r\n    if (rating >= 4) {\r\n      const book = allBooks.find(b => b.id === bookId);\r\n      if (book && book.categories) {\r\n        genres.push(...book.categories.map(cat => cat.toLowerCase()));\r\n      }\r\n    }\r\n  });\r\n  return [...new Set(genres)];\r\n};\r\n\r\nexport const getRecommendationReason = (book, userRatings, userPreferences, allBooks) => {\r\n  const reasons = [];\r\n  \r\n  const userGenres = getUserGenresFromRatings(userRatings, allBooks);\r\n  if (book.categories) {\r\n    const matchingGenres = book.categories.filter(cat => \r\n      userGenres.includes(cat.toLowerCase())\r\n    );\r\n    if (matchingGenres.length > 0) {\r\n      reasons.push(`You enjoyed ${matchingGenres[0]} books`);\r\n    }\r\n  }\r\n\r\n  if (userPreferences.authors) {\r\n    const matchingAuthor = userPreferences.authors.find(author =>\r\n      book.authors.some(bookAuthor => \r\n        bookAuthor.toLowerCase().includes(author.toLowerCase())\r\n      )\r\n    );\r\n    if (matchingAuthor) {\r\n      reasons.push(`You like ${matchingAuthor}`);\r\n    }\r\n  }\r\n\r\n  if (book.averageRating >= 4.5) {\r\n    reasons.push(`Highly rated (${book.averageRating}/5)`);\r\n  }\r\n\r\n  return reasons.length > 0 ? reasons[0] : 'Recommended for you';\r\n};\r\n\r\nexport const formatBookForRecommendation = (book, reason) => ({\r\n  ...book,\r\n  recommendationReason: reason\r\n});\r\n\r\n// Genre options for user preferences\r\nexport const GENRE_OPTIONS = [\r\n  'Fiction',\r\n  'Non-fiction',\r\n  'Mystery',\r\n  'Romance',\r\n  'Science Fiction',\r\n  'Fantasy',\r\n  'Biography',\r\n  'History',\r\n  'Self-help',\r\n  'Business',\r\n  'Psychology',\r\n  'Philosophy',\r\n  'Science',\r\n  'Technology',\r\n  'Health',\r\n  'Cooking',\r\n  'Travel',\r\n  'Art',\r\n  'Poetry',\r\n  'Drama'\r\n];\r\n\r\n// Reading status configuration\r\nexport const READING_STATUS_OPTIONS = [\r\n  {\r\n    value: 'want-to-read',\r\n    label: 'Want to Read',\r\n    color: '#ffc107'\r\n  },\r\n  {\r\n    value: 'currently-reading',\r\n    label: 'Currently Reading',\r\n    color: '#28a745'\r\n  },\r\n  {\r\n    value: 'finished',\r\n    label: 'Finished',\r\n    color: '#007bff'\r\n  }\r\n];\r\n\r\n// Utility functions\r\nexport const formatDate = (dateString) => {\r\n  if (!dateString) return 'Unknown';\r\n  const date = new Date(dateString);\r\n  return date.toLocaleDateString('en-US', {\r\n    year: 'numeric',\r\n    month: 'long',\r\n    day: 'numeric'\r\n  });\r\n};\r\n\r\nexport const truncateText = (text, maxLength = 150) => {\r\n  if (!text) return 'No description available';\r\n  const cleanText = text.replace(/<[^>]*>/g, '');\r\n  return cleanText.length > maxLength ? \r\n    cleanText.substring(0, maxLength) + '...' : \r\n    cleanText;\r\n};\r\n\r\n// UPDATED: Book image with custom cover support\r\nexport const getBookImage = (book) => {\r\n  // Check for custom uploaded cover first\r\n  try {\r\n    const customCovers = JSON.parse(localStorage.getItem('customBookCovers') || '{}');\r\n    if (customCovers[book.id]) return customCovers[book.id];\r\n  } catch (error) {\r\n    console.log('Error loading custom covers:', error);\r\n  }\r\n  \r\n  if (book.thumbnail) return book.thumbnail;\r\n  if (book.imageLinks?.thumbnail) return book.imageLinks.thumbnail;\r\n  if (book.imageLinks?.smallThumbnail) return book.imageLinks.smallThumbnail;\r\n  return null;\r\n};\r\n\r\nexport const normalizeBookData = (apiBook) => {\r\n  const volumeInfo = apiBook.volumeInfo || {};\r\n  \r\n  return {\r\n    id: apiBook.id,\r\n    title: volumeInfo.title || 'Unknown Title',\r\n    authors: volumeInfo.authors || ['Unknown Author'],\r\n    description: volumeInfo.description || '',\r\n    publishedDate: volumeInfo.publishedDate || '',\r\n    pageCount: volumeInfo.pageCount || 0,\r\n    categories: volumeInfo.categories || [],\r\n    averageRating: volumeInfo.averageRating || 0,\r\n    ratingsCount: volumeInfo.ratingsCount || 0,\r\n    thumbnail: getBookImage(volumeInfo),\r\n    previewLink: volumeInfo.previewLink || '',\r\n    infoLink: volumeInfo.infoLink || '',\r\n    isbn: volumeInfo.industryIdentifiers?.[0]?.identifier || ''\r\n  };\r\n};\r\n\r\n// Book collection management\r\nexport const sortBooksByRelevance = (books, query) => {\r\n  if (!query) return books;\r\n  \r\n  const queryLower = query.toLowerCase();\r\n  \r\n  return books.sort((a, b) => {\r\n    let scoreA = 0;\r\n    let scoreB = 0;\r\n    \r\n    if (a.title.toLowerCase().includes(queryLower)) scoreA += 10;\r\n    if (b.title.toLowerCase().includes(queryLower)) scoreB += 10;\r\n    \r\n    if (a.authors.some(author => author.toLowerCase().includes(queryLower))) scoreA += 5;\r\n    if (b.authors.some(author => author.toLowerCase().includes(queryLower))) scoreB += 5;\r\n    \r\n    if (a.categories?.some(cat => cat.toLowerCase().includes(queryLower))) scoreA += 2;\r\n    if (b.categories?.some(cat => cat.toLowerCase().includes(queryLower))) scoreB += 2;\r\n    \r\n    scoreA += (a.averageRating || 0) * 0.1;\r\n    scoreB += (b.averageRating || 0) * 0.1;\r\n    \r\n    return scoreB - scoreA;\r\n  });\r\n};\r\n\r\n// User preference helpers\r\nexport const getUserFavoriteGenres = (userRatings, allBooks, minRating = 4) => {\r\n  const genreCount = {};\r\n  \r\n  Object.entries(userRatings).forEach(([bookId, rating]) => {\r\n    if (rating >= minRating) {\r\n      const book = allBooks.find(b => b.id === bookId);\r\n      if (book?.categories) {\r\n        book.categories.forEach(category => {\r\n          const normalizedGenre = category.toLowerCase();\r\n          genreCount[normalizedGenre] = (genreCount[normalizedGenre] || 0) + 1;\r\n        });\r\n      }\r\n    }\r\n  });\r\n  \r\n  return Object.entries(genreCount)\r\n    .sort(([,a], [,b]) => b - a)\r\n    .map(([genre]) => genre)\r\n    .slice(0, 5);\r\n};\r\n\r\nexport const getUserFavoriteAuthors = (userRatings, allBooks, minRating = 4) => {\r\n  const authorCount = {};\r\n  \r\n  Object.entries(userRatings).forEach(([bookId, rating]) => {\r\n    if (rating >= minRating) {\r\n      const book = allBooks.find(b => b.id === bookId);\r\n      if (book?.authors) {\r\n        book.authors.forEach(author => {\r\n          authorCount[author] = (authorCount[author] || 0) + 1;\r\n        });\r\n      }\r\n    }\r\n  });\r\n  \r\n  return Object.entries(authorCount)\r\n    .sort(([,a], [,b]) => b - a)\r\n    .map(([author]) => author)\r\n    .slice(0, 5);\r\n};\r\n\r\n// Reading progress helpers\r\nexport const calculateReadingProgress = (readingList, readingGoal = 12) => {\r\n  const finishedBooks = readingList.filter(book => \r\n    book.readingStatus === 'finished'\r\n  ).length;\r\n  \r\n  const currentlyReading = readingList.filter(book => \r\n    book.readingStatus === 'currently-reading'\r\n  ).length;\r\n  \r\n  const wantToRead = readingList.filter(book => \r\n    book.readingStatus === 'want-to-read' || !book.readingStatus\r\n  ).length;\r\n  \r\n  return {\r\n    finished: finishedBooks,\r\n    currentlyReading,\r\n    wantToRead,\r\n    totalInList: readingList.length,\r\n    progressToGoal: Math.min(100, Math.round((finishedBooks / readingGoal) * 100)),\r\n    isOnTrack: finishedBooks >= readingGoal * (new Date().getMonth() + 1) / 12\r\n  };\r\n};\r\n\r\n// Search and filter helpers\r\nexport const filterBooksByGenre = (books, genres) => {\r\n  if (!genres || genres.length === 0) return books;\r\n  \r\n  return books.filter(book => \r\n    book.categories?.some(category =>\r\n      genres.some(genre => \r\n        category.toLowerCase().includes(genre.toLowerCase())\r\n      )\r\n    )\r\n  );\r\n};\r\n\r\nexport const filterBooksByAuthor = (books, authors) => {\r\n  if (!authors || authors.length === 0) return books;\r\n  \r\n  return books.filter(book =>\r\n    book.authors?.some(bookAuthor =>\r\n      authors.some(author =>\r\n        bookAuthor.toLowerCase().includes(author.toLowerCase())\r\n      )\r\n    )\r\n  );\r\n};\r\n\r\nexport const filterBooksByRating = (books, minRating = 0) => {\r\n  return books.filter(book => \r\n    (book.averageRating || 0) >= minRating\r\n  );\r\n};\r\n\r\nexport const filterBooksByYear = (books, startYear, endYear) => {\r\n  return books.filter(book => {\r\n    if (!book.publishedDate) return false;\r\n    const year = parseInt(book.publishedDate.substring(0, 4));\r\n    return year >= startYear && year <= endYear;\r\n  });\r\n};\r\n\r\n// CORRECTED: Reading time calculation (shorter format)\r\nexport const calculateReadingTime = (pageCount, wordsPerPage = 250, wordsPerMinute = 200) => {\r\n  if (!pageCount || pageCount <= 0) return 'Unknown';\r\n  \r\n  const totalWords = pageCount * wordsPerPage;\r\n  const totalMinutes = totalWords / wordsPerMinute;\r\n  \r\n  if (totalMinutes < 60) {\r\n    return `${Math.round(totalMinutes)} min`;\r\n  } else {\r\n    const hours = Math.floor(totalMinutes / 60);\r\n    const minutes = Math.round(totalMinutes % 60);\r\n    return minutes > 0 ? `${hours}h ${minutes}m` : `${hours}h`;\r\n  }\r\n};\r\n\r\n// CORRECTED: Reading difficulty (shorter labels)\r\nexport const getReadingDifficulty = (pageCount) => {\r\n  if (!pageCount || pageCount <= 0) return { level: 'Unknown', color: '#666' };\r\n  \r\n  if (pageCount < 200) return { level: 'Quick', color: '#28a745' };\r\n  if (pageCount < 400) return { level: 'Standard', color: '#ffc107' };\r\n  if (pageCount < 600) return { level: 'Long', color: '#fd7e14' };\r\n  return { level: 'Epic', color: '#dc3545' };\r\n};\r\n\r\n// NEW: Random book selection helpers\r\nexport const getRandomBook = (books) => {\r\n  if (!books || books.length === 0) return null;\r\n  const randomIndex = Math.floor(Math.random() * books.length);\r\n  return books[randomIndex];\r\n};\r\n\r\nexport const getRandomUnreadBook = (books) => {\r\n  const unreadBooks = books.filter(book => book.readingStatus !== 'finished');\r\n  return getRandomBook(unreadBooks);\r\n};\r\n\r\n// NEW: Book statistics helpers\r\nexport const calculateBookStats = (readingList, ratings) => {\r\n  const totalBooks = readingList.length;\r\n  const ratedBooks = Object.keys(ratings).length;\r\n  const finishedBooks = readingList.filter(book => book.readingStatus === 'finished').length;\r\n  const currentlyReading = readingList.filter(book => book.readingStatus === 'currently-reading').length;\r\n  \r\n  const totalPages = readingList\r\n    .filter(book => book.pageCount > 0)\r\n    .reduce((sum, book) => sum + book.pageCount, 0);\r\n  \r\n  const averagePages = totalBooks > 0 ? Math.round(totalPages / totalBooks) : 0;\r\n  \r\n  const genreCount = {};\r\n  readingList.forEach(book => {\r\n    if (book.categories) {\r\n      book.categories.forEach(category => {\r\n        genreCount[category] = (genreCount[category] || 0) + 1;\r\n      });\r\n    }\r\n  });\r\n  \r\n  const favoriteGenre = Object.entries(genreCount)\r\n    .sort(([,a], [,b]) => b - a)[0]?.[0] || 'None yet';\r\n\r\n  const averageRating = ratedBooks > 0 \r\n    ? (Object.values(ratings).reduce((sum, rating) => sum + rating, 0) / ratedBooks).toFixed(1)\r\n    : 0;\r\n\r\n  return {\r\n    totalBooks,\r\n    ratedBooks,\r\n    finishedBooks,\r\n    currentlyReading,\r\n    totalPages,\r\n    averagePages,\r\n    favoriteGenre,\r\n    averageRating,\r\n    genreVariety: Object.keys(genreCount).length\r\n  };\r\n};\r\n\r\n// NEW: Custom book cover helpers\r\nexport const saveCustomBookCover = (bookId, imageDataUrl) => {\r\n  try {\r\n    const customCovers = JSON.parse(localStorage.getItem('customBookCovers') || '{}');\r\n    customCovers[bookId] = imageDataUrl;\r\n    localStorage.setItem('customBookCovers', JSON.stringify(customCovers));\r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error saving custom cover:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\nexport const removeCustomBookCover = (bookId) => {\r\n  try {\r\n    const customCovers = JSON.parse(localStorage.getItem('customBookCovers') || '{}');\r\n    delete customCovers[bookId];\r\n    localStorage.setItem('customBookCovers', JSON.stringify(customCovers));\r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error removing custom cover:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}